from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
import asyncio
import config
import qrcode


bot = Bot(token=config.TOKEN) #–í–∞—à —Ç–æ–∫–µ–Ω
dp = Dispatcher()


@dp.message(Command(commands=['start']))
async def cmd_start(message: types.Message):
    await message.answer('üëã <b>–ü—Ä–∏–≤—ñ—Ç, —è QR-–ö–æ–¥ –ë–æ—Ç. \nüîí –Ø –∑–º–æ–∂—É –≤–∞–º –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ QR-–ö–æ–¥. \nüîó –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.</b>', parse_mode = 'HTML')


@dp.message(Command(commands=['help']))
async def cmd_help(message: types.Message):
    await message.answer("‚ÅâÔ∏è<b> –Ø–∫—â–æ —É –≤–∞—Å —î –ø—Ä–æ–±–ª–µ–º–∏.</b> \n‚úâÔ∏è <b>–ù–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ</b> <a href='https://t.me/nikit0ns'>@nikit0ns</a><b>.</b>", disable_web_page_preview = True, parse_mode = 'HTML')


@dp.message()
async def send_text_based_qr(message: types.Message):
    qr = qrcode.QRCode(version=1,
                       error_correction = qrcode.constants.ERROR_CORRECT_L,
                       box_size = 20, 
                       border = 2)

    qr.add_data(message.text)
    qr.make(fit = True)  

    img = qr.make_image(fill_color = 'black', back_color = 'white')
    img.save('photo.png')
    img = FSInputFile('photo.png')

    await message.reply_photo(img, caption = f'<b>‚úÖ –í–∞—à QR-Code —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ \n\n‚öôÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @Generator_QR_Code_Bot</b>', parse_mode = 'HTML')



async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())